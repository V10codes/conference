generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Conference {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String           @db.String
  description    String           @db.String
  venue          String           @db.String
  program        String           @db.String
  author         User             @relation("AuthorOfConference", fields: [authorId], references: [id])
  authorId       String           @db.ObjectId
  startDate      DateTime?        @map("start_date") @db.Timestamp
  endDate        DateTime?        @map("end_date") @db.Timestamp
  accepting      Boolean          @default(true)
  creationDate   DateTime?        @default(now())
  price          Float            @default(0.0)
  guestSpeakers  String[]         @default([])
  topics         String[]         @default([])
  papers         Paper[]          @relation("ConferencePapers")
  
  // Establish relationship with Registration model
  registrations   Registration[]   @relation("ConferenceRegistrations") // Relationship to registrations
}

enum Role {
  ADMIN
  ATTENDEE
  AUTHOR
}

model User {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  email          String             @unique
  username       String             @unique
  password       String
  createdAt      DateTime           @default(now())
  authored       Conference[]       @relation("AuthorOfConference")
  papers         Paper[]            @relation("UserPapers")
  role           Role               @default(ATTENDEE)

  // Array of conference registrations
  registrations   Registration[]     @relation("UserRegistrations") // Relationship to registrations
}

model Registration {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  conference     Conference         @relation("ConferenceRegistrations", fields: [conferenceId], references: [id]) // Establish relationship with Conference
  conferenceId   String             @db.ObjectId // Foreign key for conferenceId
  user           User               @relation("UserRegistrations", fields: [userId], references: [id]) // Establish relationship with User
  userId         String             @db.ObjectId // Foreign key for userId
  approved       Boolean            @default(false) // Approval status of the registration
  registrationDate DateTime         @default(now()) // Date of registration
}

model Paper {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  fileUrl        String
  filename       String
  user           User               @relation("UserPapers", fields: [userId], references: [id])
  userId         String             @db.ObjectId
  conference     Conference         @relation("ConferencePapers", fields: [conferenceId], references: [id])
  conferenceId   String             @db.ObjectId
}
